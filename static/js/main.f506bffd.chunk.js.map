{"version":3,"sources":["assets/img/play.svg","assets/img/wave.svg","assets/img/pause.svg","assets/img/readed.svg","assets/img/noreaded.svg","redux/reduces/app.ts","redux/reduces/dialogs.ts","redux/reduces/messages.ts","redux/reduces/user.ts","redux/reduces/attachments.ts","redux/reduces/index.ts","redux/store.ts","components/Button/index.tsx","components/Block/index.tsx","utils/helpers/isAudio.ts","components/MessageAudio/index.tsx","utils/helpers/convertCurentTime.ts","components/Message/index.tsx","utils/helpers/createAvatarFromHash.ts","components/Avatar/index.tsx","components/DialogItem/index.tsx","components/Time/index.tsx","components/IconReaded/index.tsx","components/Dialogs/index.tsx","components/Status/index.tsx","components/ChatInput/index.tsx","components/Messages/index.tsx","utils/helpers/validateField.ts","utils/helpers/openNotification.ts","components/FormField/index.tsx","core/axios.ts","utils/api/dialogs.ts","utils/api/messages.ts","utils/api/user.ts","utils/api/files.ts","redux/actions/dialogs.ts","redux/actions/messages.ts","redux/actions/user.ts","redux/actions/app.ts","redux/actions/attachments.ts","core/socket.ts","containers/Dialogs.tsx","containers/Messages.tsx","containers/ChatInput.tsx","containers/Status.tsx","containers/Sidebar.tsx","components/Sidebar/index.tsx","components/UploadFiles/index.tsx","components/ErrorIndicator/index.tsx","components/ErrorBoundry/index.tsx","modules/LoginForm/components/LoginForm.tsx","utils/validations.ts","modules/LoginForm/containers/LoginForm.ts","modules/LoginForm/index.ts","modules/RegisterForm/components/RegisterForm.tsx","modules/RegisterForm/index.ts","modules/RegisterForm/containers/RegisterForm.ts","pages/Auth/components/CheckEmailInfo.tsx","pages/Auth/index.tsx","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["module","exports","initialState","isInitialized","items","currentDialogId","isLoading","data","isAuth","window","localStorage","token","rootReducer","combineReducers","user","state","action","type","payload","dialogs","newItems","map","item","_id","messages","oldItems","idx","readed","filter","message","app","attachments","uid","middleware","thunk","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","Button","props","className","classnames","size","Block","children","file","length","ext","MessageAudio","audioSrc","useState","isPlaying","setIsPlaying","currentTime","setCurrentTime","progress","setProgress","audioEl","useRef","useEffect","current","addEventListener","duration","src","ref","preload","style","width","onClick","pause","play","pauseSvg","alt","playSvg","waveSvg","number","mins","Math","floor","secs","Number","toFixed","convertCurrentTime","Emoji","require","Emojione","Message","id","createdAt","text","date","isMe","isTyping","setImageUrl","onDeleteMessage","onShowImage","url","classNames","isAudio","undefined","isReaded","content","e","trigger","shape","icon","key","replace","filename","renderAttachment","Date","createAvatarFromHash","hash","substr","split","index","charCodeAt","r","g","b","color","tinycolor","lighten","saturate","toHexString","colorLighten","Avatar","avatar","fullname","firstChar","toUpperCase","background","DialogItem","create_at","partner","lastMessage","author","userId","to","isOnline","isToday","format","renderLastMessage","Time","formatInWordsToNow","addSuffix","locale","ruLocale","IconReaded","readedSvg","noReadedSvg","Dialogs","onSearch","inputValue","Search","Input","value","onChange","target","placeholder","tip","orderBy","description","Status","online","ChatInput","setValue","toggleEmoji","emojiVisible","addEmoji","selectFile","removeAttachment","isDisabled","inputRef","handleSendMessage","onSendMessage","isRecording","onStopRecording","onRecord","onSelect","TextArea","test","autoSize","minRows","maxRows","allowClear","onKeyUp","disabled","onFiles","containerProps","uploadProps","accept","multiple","Messages","boxRef","showImage","setShowImage","imageUrl","dialogsItems","onRemoveMessage","currentDialog","find","visible","footer","onCancel","ValidateField","touched","errors","openNotification","notification","FormField","handleChange","handleBlur","Item","help","validateStatus","validateField","hasFeedback","prefix","onBlur","axios","defaults","baseURL","headers","common","get","then","res","a","async","post","response","dialog_id","delete","postData","query","formData","FormData","append","actions","setCurrentDialog","setItems","updateDialog","dialog","addNewDialog","setIsLoading","bool","setMessages","addMessage","removeMessageById","updateUnreadMessages","setAuth","setUserData","fetchUserData","dispatch","getState","userApi","status","console","log","fetchLoginData","initializeAppAC","setAttachments","files","socket","io","connect","fetchDialogs","dialogsApi","dialogsActions","setInputValue","Array","from","filtered","setFiltered","onAddNewDialog","emit","on","removeListener","toLowerCase","indexOf","memo","fetchMessages","setIsTyping","typingTimeoutId","toggleIsTyping","clearInterval","setTimeout","onNewMessage","messagesApi","onUpdateUnreadMsg","messagesRef","useCallback","node","scrollTo","userSocket","messagesActions","attachmentsActions","setLoading","setEmojiVisible","setIsRecording","setIsDisabled","mediaRecorder","setMediaRecorder","navigator","getUserMedia","mozGetUserMedia","msGetUserMedia","webkitGetUserMedia","onRecording","stream","recorder","MediaRecorder","start","onstart","onstop","ondataavailable","File","filesApi","sendAudio","onError","err","Error","toString","audioId","stop","onOutSideClick","el","contains","elHeight","offsetHeight","document","querySelector","height","removeEventListener","emoji","native","uploaded","i","random","name","keyCode","audio","currentDialogObj","withRouter","setVisible","users","setUsers","newMessageText","setNewMessageText","setPartner","selectedInputValue","setSelectInputValue","modalText","showModal","handleCancel","handleOk","history","push","onInputSelect","val","error","onAddNewMessage","onInputChange","Option","Select","Sidebar","options","title","confirmLoading","loading","label","showSearch","optionFilterProp","filterOption","getBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","UploadFiles","previewVisible","setPreviewVisible","previewImage","setPreviewImage","fileList","setFileList","listType","onPreview","preview","originFileObj","onRemove","subTitle","ErrorBoundry","errorIndicator","this","setState","Component","LoginForm","handleSubmit","isSubmitting","onSubmit","validateFunc","values","rules","email","password","password_2","Object","keys","forEach","LoginFormContainer","withFormik","mapPropsToValues","validate","setSubmitting","appActions","displayName","RegisterForm","CheckEmailInfo","location","search","verified","setVerified","setError","info","extra","renderTextInfo","catch","Auth","exact","path","component","setDialogsItems","signOut","setMessagesItems","dialogId","pathname","pop","fontSize","marginRight","cursor","confirm","initializeApp","promise","all","render","position","left","top","transform","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f506bffd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.65f03140.svg\";","module.exports = __webpack_public_path__ + \"static/media/wave.86c27fea.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.a61933e8.svg\";","module.exports = __webpack_public_path__ + \"static/media/readed.2da46147.svg\";","module.exports = __webpack_public_path__ + \"static/media/noreaded.1456f013.svg\";","import { ActionsTypes } from './../actions/app'\r\n\r\nconst initialState = {\r\n  isInitialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport default (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP:INITIALIZE_APP':\r\n      return {\r\n        ...state,\r\n        isInitialized: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { DialogType } from \"./../../types/types\";\r\nimport { ActionsTypes } from \"./../actions/dialogs\";\r\n\r\nconst initialState = {\r\n  items: [] as Array<DialogType>,\r\n  currentDialogId: \"\",\r\n  isLoading: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport default (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"DIALOGS:SET_ITEMS\":\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n    case \"DIALOGS:ADD_NEW_DIALOG\":\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.payload],\r\n      };\r\n\r\n    case \"DIALOGS:SET_CURRENT_DIALOG\":\r\n      return {\r\n        ...state,\r\n        currentDialogId: action.payload,\r\n      };\r\n    case \"DIALOGS:UPDATE_DIALOG\":\r\n      let newItems: Array<DialogType> = state.items.map((item) => {\r\n        if (item._id === action.payload._id) {\r\n          item = action.payload;\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        ...state,\r\n        items: newItems,\r\n      };\r\n\r\n    case \"DIALOGS:SET_IS_LOADING\":\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ActionsTypes } from \"./../actions/messages\";\r\nimport { MessageType } from \"./../../types/types\";\r\nexport const SET_ITEMS = \"MESSAGES:SET_ITEMS\";\r\nexport const SET_IS_LOADING = \"MESSAGES:SET_IS_LOADING\";\r\nexport const ADD_MESSAGE = \"MESSAGES:ADD_MESSAGE\";\r\nexport const REMOVE_MESSAGE = \"MESSAGES:REMOVE_MESSAGE\";\r\nexport const UPDATE_UNREAD_MESSAGES = \"MESSAGES:UPDATE_UNREAD_MESSAGES\";\r\n\r\nconst initialState = {\r\n  items: [] as Array<MessageType>,\r\n  isLoading: false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport default (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"MESSAGES:SET_ITEMS\":\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n\r\n    case \"MESSAGES:SET_IS_LOADING\":\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    case \"MESSAGES:ADD_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        items: [...state.items, action.payload],\r\n      };\r\n    case \"MESSAGES:UPDATE_UNREAD_MESSAGES\":\r\n      let oldItems = [...state.items];\r\n      let newItems = oldItems.map((item, idx) => {\r\n        if (!item.readed) {\r\n          let newItem = { ...item, readed: true };\r\n          item = newItem;\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        ...state,\r\n        items: newItems,\r\n      };\r\n    case \"MESSAGES:REMOVE_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((message) => message._id !== action.payload),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ActionsTypes } from \"./../actions/user\";\r\nimport { UserDataType } from \"./../../types/types\";\r\nexport const SET_USER_DATA = \"USER:SET_USER_DATA\";\r\nexport const SET_IS_AUTH = \"USER:SET_IS_AUTH\";\r\n\r\nconst initialState = {\r\n  data: null as UserDataType | null,\r\n  isAuth: window.localStorage.token ? true : false,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nexport default (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"USERS:SET_USER_DATA\":\r\n      return {\r\n        ...state,\r\n\r\n        data: action.payload,\r\n      };\r\n    case \"USERS:SET_IS_AUTH\":\r\n      return {\r\n        ...state,\r\n        isAuth: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ActionsTypes } from \"./../actions/attachments\";\r\nimport { AttachmentServerType } from \"./../../types/types\";\r\nimport { AttachmentType } from \"../../types/types\";\r\n\r\nexport const SET_ATTACHMENTS = \"ATTACHMENTS:SET_ATTACHMENTS\";\r\nexport const REMOVE_ATTACHMENT = \"ATTACHMENTS:REMOVE_ATTACHMENT\";\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n  items: [] as Array<AttachmentServerType | AttachmentType>,\r\n};\r\n\r\nexport default (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"ATTACHMENTS:SET_ATTACHMENTS\":\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n      };\r\n    case \"ATTACHMENTS:REMOVE_ATTACHMENT\":\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(\r\n          (item: any) => item.uid !== action.payload.uid\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport appReducer from \"./app\";\r\nimport dialogsReducer from \"./dialogs\";\r\nimport messagesReducer from \"./messages\";\r\nimport userReducer from \"./user\";\r\nimport attachmentsReducer from \"./attachments\";\r\n\r\n// const reducers = [\"user\", \"dialogs\", \"messages\", \"app\", \"attachments\"];\r\n\r\n// let rootReducer = combineReducers(\r\n//   reducers.reduce((initial: any, name: string) => {\r\n//     initial[name] = require(`./${name}`).default;\r\n//     return initial;\r\n//   }, {})\r\n// );\r\n\r\nlet rootReducer = combineReducers({\r\n  user: userReducer,\r\n  dialogs: dialogsReducer,\r\n  messages: messagesReducer,\r\n  app: appReducer,\r\n  attachments: attachmentsReducer\r\n});\r\n\r\ntype RootReducer = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport { applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { compose } from \"redux\";\r\n\r\nimport rootReducer from \"./reduces\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst composeEnhancers =\r\n  typeof window === \"object\" &&\r\n  //@ts-ignore\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? //@ts-ignore\r\n      //@ts-ignore\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n  [key: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nlet store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;\r\n","import React, { ButtonHTMLAttributes, FormEvent, MouseEvent } from \"react\";\r\nimport { Button as BaseButton } from \"antd\";\r\nimport classnames from \"classnames\";\r\n\r\nimport \"./Button.scss\";\r\nimport { ButtonProps } from \"antd/lib/button\";\r\ntype OwnProps = {};\r\nconst Button: React.FC<OwnProps & ButtonProps> = props => {\r\n  return (\r\n    <BaseButton\r\n      {...props}\r\n      className={classnames(\"button\", props.className, {\r\n        \"button--large\": props.size === \"large\"\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { ReactNode } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nimport \"./Block.scss\";\r\n\r\ntype Props = {\r\n  className?: string;\r\n  children: ReactNode;\r\n};\r\nconst Block: React.FC<Props> = ({ children, className }) => {\r\n  return <div className={classnames(\"block\", className)}>{children}</div>;\r\n};\r\n\r\nexport default Block;\r\n","import { AttachmentServerType } from \"./../../types/types\";\r\nexport default (attachments: Array<AttachmentServerType> | undefined) => {\r\n  if (!attachments) {\r\n    return null;\r\n  }\r\n  const file = attachments[0];\r\n  return attachments.length && file.ext === \"webm\";\r\n};\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport playSvg from \"../../assets/img/play.svg\";\r\nimport waveSvg from \"../../assets/img/wave.svg\";\r\nimport pauseSvg from \"../../assets/img/pause.svg\";\r\nimport convertCurrentTime from \"../../utils/helpers/convertCurentTime\";\r\n\r\ntype Props = {\r\n  audioSrc: string;\r\n};\r\n\r\nconst MessageAudio: React.FC<Props> = ({ audioSrc }) => {\r\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n  const [currentTime, setCurrentTime] = useState<number>(0);\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const audioEl = useRef<HTMLAudioElement | null>(null);\r\n\r\n  const toggleAudio = () => {\r\n    if (audioEl.current) {\r\n      if (!isPlaying) {\r\n        audioEl.current.play();\r\n      } else {\r\n        audioEl.current.pause();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (audioEl.current) {\r\n      audioEl.current.addEventListener(\"playing\", () => setIsPlaying(true));\r\n      audioEl.current.addEventListener(\"ended\", () => {\r\n        setIsPlaying(false);\r\n        setProgress(0);\r\n        setCurrentTime(0);\r\n      });\r\n      audioEl.current.addEventListener(\"pause\", () => setIsPlaying(false));\r\n      audioEl.current.addEventListener(\"timeupdate\", () => {\r\n        const duration = (audioEl.current && audioEl.current.duration) || 0;\r\n        if (audioEl.current) {\r\n          setCurrentTime(audioEl.current.currentTime);\r\n          setProgress((audioEl.current.currentTime / duration) * 100);\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"message__audio\">\r\n      <audio src={audioSrc} ref={audioEl} preload=\"auto\"></audio>\r\n      <div\r\n        style={{ width: progress + \"%\" }}\r\n        className=\"message__audio-progress\"\r\n      ></div>\r\n      <div className=\"message__audio-info\">\r\n        <div className=\"message__audio-btn\">\r\n          <button onClick={toggleAudio}>\r\n            {isPlaying ? (\r\n              <img src={pauseSvg} alt=\"Pause swg\" />\r\n            ) : (\r\n              <img src={playSvg} alt=\"Play swg\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n        <div className=\"message__audio-wave\">\r\n          <img src={waveSvg} alt=\"Wave svg\" />\r\n        </div>\r\n        <div className=\"message__audio-duration\">\r\n          {convertCurrentTime(currentTime)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageAudio;\r\n","export default (number: number) => {\r\n  const mins = Math.floor(number / 60);\r\n  const secs = new Number((number % 60).toFixed());\r\n  return `${mins < 10 ? \"0\" : \"\"}${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Time, IconReaded } from \"..\";\r\nimport isAudio from \"../../utils/helpers/isAudio\";\r\nimport { Avatar } from \"../\";\r\nimport { UserDataType, AttachmentServerType } from \"../../types/types\";\r\n\r\nimport classNames from \"classnames\";\r\nimport { Popover, Button } from \"antd\";\r\n\r\nimport \"./Message.scss\";\r\nimport MessageAudio from \"../MessageAudio\";\r\n\r\nconst Render = require(\"react-emoji-render\");\r\nconst Emoji = Render.Emojione;\r\n\r\ntype Props = {\r\n  id?: string;\r\n  key?: string;\r\n  alt?: string;\r\n  createdAt?: string;\r\n  text?: string;\r\n  user: UserDataType;\r\n  date?: Date;\r\n  isMe?: boolean;\r\n  attachments?: Array<AttachmentServerType>;\r\n  isTyping?: boolean;\r\n  readed?: boolean;\r\n  setImageUrl?: (url: string) => void;\r\n  onDeleteMessage?: (id: string) => void;\r\n};\r\nconst Message: React.FC<Props> = ({\r\n  id,\r\n  createdAt,\r\n  text,\r\n  user,\r\n  date,\r\n  isMe,\r\n  attachments,\r\n  isTyping,\r\n  readed,\r\n  setImageUrl,\r\n  onDeleteMessage,\r\n}) => {\r\n  const renderAttachment = (item: AttachmentServerType) => {\r\n    if (item.ext !== \"webm\") {\r\n      return (\r\n        <div key={item._id} className=\"message__attachments-item\">\r\n          {item.url && (\r\n            <img\r\n              src={item.url.replace(/http/, \"https\")}\r\n              alt={item.filename}\r\n              onClick={() => {\r\n                if (item.url) onShowImage(item.url);\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <MessageAudio key={item._id} audioSrc={item.url ? item.url : \"\"} />\r\n      );\r\n    }\r\n  };\r\n\r\n  let onShowImage = (url: string) => {\r\n    if (setImageUrl) {\r\n      setImageUrl(url);\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={classNames(\"message\", {\r\n        \"message--isme\": isMe,\r\n        \"message--is-typing\": isTyping,\r\n        \"message--image\": attachments && attachments.length === 1 && !text,\r\n        \"message--is-audio\": isAudio(attachments),\r\n      })}\r\n    >\r\n      <div className=\"message__content\">\r\n        {isMe && readed !== undefined && (\r\n          <IconReaded isMe={isMe} isReaded={readed} />\r\n        )}\r\n        {isMe && (\r\n          <div className=\"message__icon-actions\">\r\n            <Popover\r\n              content={\r\n                <div>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      if (onDeleteMessage && id) {\r\n                        onDeleteMessage(id);\r\n                      }\r\n                    }}\r\n                  >\r\n                    Удалить сообщение\r\n                  </Button>\r\n                </div>\r\n              }\r\n              trigger=\"click\"\r\n            >\r\n              <Button type=\"link\" shape=\"circle\" icon=\"ellipsis\" />\r\n            </Popover>\r\n          </div>\r\n        )}\r\n        <div className=\"message__avatar\">\r\n          <Avatar user={user} />\r\n        </div>\r\n        <div className=\"message__info\">\r\n          {\" \"}\r\n          {(isTyping || text) && (\r\n            <div className=\"message__bubble\">\r\n              {text && <p className=\"message__text\">{<Emoji text={text} />}</p>}\r\n\r\n              {isTyping && (\r\n                <div className=\"message__typing\">\r\n                  <span></span>\r\n                  <span></span>\r\n                  <span></span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n          {attachments && (\r\n            <div className=\"message__attachments\">\r\n              {attachments.map((item) => renderAttachment(item))}\r\n            </div>\r\n          )}\r\n          {date && createdAt && (\r\n            <span className=\"message__date\">\r\n              <Time date={new Date(createdAt)} />\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import tinycolor from \"tinycolor2\";\r\n\r\nconst getCorrectIndex = (index: string) => {\r\n  return index.charCodeAt(0) > 255\r\n    ? 255\r\n    : index.charCodeAt(0) < 0\r\n    ? 0\r\n    : index.charCodeAt(0);\r\n};\r\n\r\nconst createAvatarFromHash = (hash: string) => {\r\n  const [r, g, b] = hash\r\n    .substr(11, 14)\r\n    .split(\"\")\r\n    .map(item => {\r\n      return getCorrectIndex(item);\r\n    });\r\n  return {\r\n    color: tinycolor({ r, g, b })\r\n      .lighten(10)\r\n      .saturate(15)\r\n      .toHexString(),\r\n    colorLighten: tinycolor({ r, g, b })\r\n      .lighten(30)\r\n      .saturate(30)\r\n      .toHexString()\r\n  };\r\n};\r\n\r\nexport default createAvatarFromHash;\r\n","import { UserDataType } from \"./../../types/types\";\r\nimport React from \"react\";\r\nimport createAvatarFromHash from \"../../utils/helpers/createAvatarFromHash\";\r\n\r\nimport \"./Avatar.scss\";\r\ntype Props = {\r\n  user: UserDataType;\r\n};\r\n\r\nlet Avatar: React.FC<Props> = ({ user }) => {\r\n  if (user.avatar) {\r\n    return (\r\n      <img\r\n        src={user.avatar}\r\n        className=\"avatar\"\r\n        alt={`Avatar ${user.fullname}`}\r\n      />\r\n    );\r\n  } else {\r\n    const { color, colorLighten } = createAvatarFromHash(user._id);\r\n    const firstChar: string = user.fullname[0].toUpperCase();\r\n    return (\r\n      <div\r\n        style={{\r\n          background: `linear-gradient(135deg, ${color} 0%, ${colorLighten} 96.52%)`\r\n        }}\r\n        className=\"avatar avatar--symbol\"\r\n      >\r\n        {firstChar}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Avatar;\r\n","import React from 'react'\r\nimport { IconReaded } from '..'\r\nimport Avatar from '../Avatar'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { MessageType, UserDataType, DialogType } from '../../types/types'\r\nimport classNames from 'classnames'\r\nimport isToday from 'date-fns/isToday'\r\n\r\nimport format from 'date-fns/format'\r\nimport { Icon } from 'antd'\r\nconst Render = require('react-emoji-render')\r\nconst Emoji = Render.Emojione\r\n\r\nconst getMessageTime = (create_at: Date) => {\r\n  if (isToday(new Date(create_at))) {\r\n    return format(new Date(create_at), 'HH:mm')\r\n  } else {\r\n    return format(new Date(create_at), 'dd.MM.yyyy')\r\n  }\r\n}\r\n\r\nconst renderLastMessage = (message: MessageType, userId: string) => {\r\n  let text = ''\r\n  if (!message.text && message.attachments) {\r\n    text = 'прикрепленный файл'\r\n  } else {\r\n    text = message.text\r\n  }\r\n\r\n  return <Emoji text={`${message.user._id === userId ? 'Вы: ' : ''} ${text}`} />\r\n}\r\ntype MapDispatchPropsType = {}\r\ntype OwnPropsType = {\r\n  key: string\r\n  _id: string\r\n  isMe: boolean\r\n  partner: UserDataType\r\n  author: UserDataType\r\n  lastMessage: MessageType\r\n  currentDialogId: string\r\n  userId: string\r\n}\r\n\r\ntype Props = MapDispatchPropsType & OwnPropsType\r\nconst DialogItem: React.FC<Props> = ({\r\n  _id,\r\n  isMe,\r\n  partner,\r\n  lastMessage,\r\n  author,\r\n  currentDialogId,\r\n  userId\r\n}) => {\r\n  let user: UserDataType = isMe ? partner : author\r\n  return (\r\n    <Link to={`/dialog/${_id}`}>\r\n      <div\r\n        className={classNames('dialogs__item', {\r\n          'dialogs__item--online': user.isOnline,\r\n          'dialogs__item--active': currentDialogId === _id\r\n        })}\r\n      >\r\n        <div className=\"dialogs__item-avatar\">\r\n          <Avatar user={user} />\r\n        </div>\r\n        <div className=\"dialogs__item-info\">\r\n          <div className=\"dialogs__item-info-top\">\r\n            <b>{user.fullname}</b>\r\n            {lastMessage && (\r\n              <span>{getMessageTime(new Date(lastMessage.createdAt))}</span>\r\n            )}\r\n          </div>\r\n          {lastMessage && (\r\n            <div className=\"dialogs__item-info-bottom\">\r\n              <p>{renderLastMessage(lastMessage, userId)}</p>\r\n\r\n              <IconReaded\r\n                isMe={userId === lastMessage.user._id}\r\n                isReaded={lastMessage.readed}\r\n              />\r\n\r\n              {lastMessage.user._id !== userId && lastMessage.readed === false && (\r\n                <div className=\"dialogs__item-info-bottom-count\">\r\n                  <Icon type=\"mail\" />\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default DialogItem\r\n","import React, { Fragment } from \"react\";\r\nimport formatInWordsToNow from \"date-fns/formatDistanceToNow\";\r\nimport ruLocale from \"date-fns/locale/ru\";\r\n\r\ntype Props = {\r\n  date: Date;\r\n};\r\nconst Time: React.FC<Props> = ({ date }) => {\r\n  return (\r\n    <Fragment>\r\n      {formatInWordsToNow(date, { addSuffix: true, locale: ruLocale })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\n\r\nimport readedSvg from \"../../assets/img/readed.svg\";\r\nimport noReadedSvg from \"../../assets/img/noreaded.svg\";\r\n\r\nimport \"./IconReaded.scss\";\r\n\r\ntype Props = {\r\n  isMe: boolean;\r\n  isReaded: boolean;\r\n};\r\nconst IconReaded: React.FC<Props> = ({ isMe, isReaded }) => {\r\n  return (\r\n    <div>\r\n      {isMe &&\r\n        (isReaded ? (\r\n          <img\r\n            className=\"message__icon-readed\"\r\n            src={readedSvg}\r\n            alt=\"Readed icon\"\r\n          />\r\n        ) : (\r\n          <img\r\n            className=\"message__icon-readed message__icon-readed--no\"\r\n            src={noReadedSvg}\r\n            alt=\"No readed icon\"\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconReaded;\r\n","import React from \"react\";\r\n\r\nimport { DialogItem } from \"..\";\r\nimport { DialogType } from \"../../types/types\";\r\n\r\nimport orderBy from \"lodash/orderBy\";\r\nimport { Input } from \"antd\";\r\nimport { Empty, Spin } from \"antd\";\r\n\r\nimport \"./Dialogs.scss\";\r\n\r\ntype Props = {\r\n  userId: string;\r\n  items: Array<DialogType>;\r\n  inputValue: string;\r\n  isLoading: boolean;\r\n  currentDialogId: string;\r\n\r\n  onSearch: (value: string) => void;\r\n};\r\n\r\nconst Dialogs: React.FC<Props> = ({\r\n  items,\r\n  userId,\r\n  onSearch,\r\n  inputValue,\r\n  isLoading,\r\n  currentDialogId\r\n}) => {\r\n  const Search = Input.Search;\r\n\r\n  return (\r\n    <div className=\"dialogs\">\r\n      <div className=\"dialogs__search\">\r\n        <Search\r\n          value={inputValue}\r\n          onChange={e => {\r\n            onSearch(e.target.value);\r\n          }}\r\n          placeholder=\"Поиск среди контактов\"\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        {isLoading ? (\r\n          <Spin tip=\"Загрузка диалогов\" />\r\n        ) : items ? (\r\n          items.length > 0 ? (\r\n            orderBy(items, [\"created_at\"], [\"desc\"]).map(item => {\r\n              return (\r\n                <DialogItem\r\n                  key={item._id}\r\n                  isMe={item.author._id === userId}\r\n                  userId={userId}\r\n                  currentDialogId={currentDialogId}\r\n                  {...item}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <Empty description=\"Ничего не найдено\" />\r\n          )\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Status.scss\";\r\n\r\ntype Props = {\r\n  online: boolean;\r\n  fullname: string;\r\n};\r\n\r\nconst Status: React.FC<Props> = props => {\r\n  let { online, fullname } = props;\r\n  return (\r\n    <div className=\"chat__dialog-header-center\">\r\n      <b className=\"chat__dialog-header-username\">{fullname}</b>\r\n      <div className=\"chat__dialog-header-status\"></div>\r\n      <div className={classNames(\"status\", { \"status--online\": online })}>\r\n        {online ? \"онлайн\" : \"офлайн\"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Status;\r\n","import React, { Fragment } from \"react\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n//@ts-ignore\r\nimport { UploadField } from \"@navjobs/upload\";\r\n\r\nimport { UploadFiles } from \"../\";\r\nimport { Button, Input, Icon } from \"antd\";\r\nimport \"./ChatInput.scss\";\r\nimport { AttachmentType } from \"../../types/types\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  setValue: (value: string) => void;\r\n  attachments: Array<AttachmentType>;\r\n  emojiVisible: boolean;\r\n  isDisabled: boolean;\r\n  inputRef: (node: HTMLInputElement) => void;\r\n  isRecording: boolean;\r\n  isLoading: boolean;\r\n\r\n  toggleEmoji: () => void;\r\n  addEmoji: (emoji: any) => void;\r\n  selectFile: (files: FileList) => Promise<void>;\r\n  removeAttachment: (file: AttachmentType) => void;\r\n  handleSendMessage: (\r\n    e: React.KeyboardEvent<HTMLTextAreaElement> &\r\n      React.MouseEvent<HTMLElement, MouseEvent>\r\n  ) => void;\r\n  onSendMessage: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  onStopRecording: () => void;\r\n  onRecord: () => void;\r\n};\r\nconst ChatInput: React.FC<Props> = props => {\r\n  const {\r\n    value,\r\n    setValue,\r\n    toggleEmoji,\r\n    emojiVisible,\r\n    addEmoji,\r\n    selectFile,\r\n    attachments,\r\n    removeAttachment,\r\n    isDisabled,\r\n    inputRef,\r\n    handleSendMessage,\r\n    onSendMessage,\r\n    isRecording,\r\n    onStopRecording,\r\n    onRecord,\r\n    isLoading\r\n  } = props;\r\n\r\n  return (\r\n    <Fragment>\r\n      <div ref={inputRef} className=\"chat-input\">\r\n        <div>\r\n          <div className=\"chat-input__smile-btn\">\r\n            <div className=\"chat-input__emoji-picker\">\r\n              {emojiVisible && <Picker onSelect={addEmoji} />}\r\n            </div>\r\n\r\n            <Button\r\n              onClick={toggleEmoji}\r\n              type=\"link\"\r\n              shape=\"circle\"\r\n              icon=\"smile\"\r\n            />\r\n          </div>\r\n          {isRecording ? (\r\n            <div className=\"chat-input__record-status\">\r\n              <i className=\"chat-input__record-status-bubble\"></i>\r\n              Recording...\r\n              <Button\r\n                className=\"stop-recording\"\r\n                type=\"link\"\r\n                shape=\"circle\"\r\n                icon=\"close\"\r\n                onClick={onStopRecording}\r\n              />\r\n            </div>\r\n          ) : (\r\n            <Input.TextArea\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n                let re = /^\\s/;\r\n                let check = re.test(e.target.value);\r\n                if (!check) {\r\n                  setValue(e.target.value);\r\n                }\r\n              }}\r\n              placeholder=\"Введите текст сообщения\"\r\n              autoSize={{ minRows: 2, maxRows: 8 }}\r\n              allowClear={true}\r\n              value={value}\r\n              onKeyUp={handleSendMessage}\r\n              disabled={isDisabled}\r\n            />\r\n          )}\r\n\r\n          <div className=\"chat-input__actions\">\r\n            {value || attachments.length || isRecording ? (\r\n              <Button\r\n                disabled={isDisabled}\r\n                onClick={onSendMessage}\r\n                size=\"large\"\r\n                type=\"link\"\r\n                icon=\"right-circle\"\r\n              />\r\n            ) : (\r\n              <div className=\"chat-input__record-btn\">\r\n                {isLoading ? (\r\n                  <Icon type=\"loading\" />\r\n                ) : (\r\n                  <Button\r\n                    onClick={onRecord}\r\n                    type=\"link\"\r\n                    shape=\"circle\"\r\n                    icon=\"audio\"\r\n                    size=\"large\"\r\n                  />\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <UploadField\r\n              onFiles={selectFile}\r\n              containerProps={{\r\n                className: \"chat-input__actions-upload-btn\"\r\n              }}\r\n              uploadProps={{\r\n                accept: \".jpg,.jpeg,.png,.gif,.bmp\",\r\n                multiple: \"multiple\"\r\n              }}\r\n            >\r\n              <Button type=\"link\" shape=\"circle\" icon=\"camera\" />\r\n            </UploadField>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <UploadFiles\r\n          attachments={attachments}\r\n          removeAttachment={removeAttachment}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n","import React from \"react\";\r\n\r\nimport { Empty, Spin, Modal } from \"antd\";\r\nimport { Message } from \"..\";\r\n\r\nimport classNames from \"classnames\";\r\nimport find from \"lodash/find\";\r\n\r\nimport \"./Messages.scss\";\r\nimport {\r\n  MessageType,\r\n  DialogType,\r\n  UserDataType,\r\n  AttachmentServerType,\r\n} from \"../../types/types\";\r\n\r\ntype Props = {\r\n  items: Array<MessageType>;\r\n  isLoading: boolean;\r\n  boxRef: (node: HTMLDivElement) => void;\r\n  currentDialogId: string;\r\n  userId: string;\r\n  isTyping: boolean;\r\n  imageUrl: string;\r\n  showImage: boolean;\r\n  dialogsItems: Array<DialogType>;\r\n  attachments: Array<AttachmentServerType>;\r\n  setImageUrl: (url: string) => void;\r\n  setShowImage: (value: boolean) => void;\r\n  onRemoveMessage: (id: string) => void;\r\n};\r\n\r\nconst Messages: React.FC<Props> = ({\r\n  items,\r\n  isLoading,\r\n  boxRef,\r\n  currentDialogId,\r\n  userId,\r\n  attachments,\r\n  setImageUrl,\r\n  showImage,\r\n  setShowImage,\r\n  imageUrl,\r\n  dialogsItems,\r\n  isTyping,\r\n  onRemoveMessage,\r\n}) => {\r\n  let currentDialog: DialogType | undefined =\r\n    dialogsItems && find(dialogsItems, { _id: currentDialogId });\r\n  let partner: UserDataType | undefined;\r\n  if (currentDialog) {\r\n    partner =\r\n      currentDialog.partner.id === userId\r\n        ? currentDialog.author\r\n        : currentDialog.partner;\r\n  }\r\n\r\n  let handleCancel = () => {\r\n    setShowImage(false);\r\n    setImageUrl(\"\");\r\n  };\r\n  return (\r\n    <div\r\n      className={classNames(\"chat__dialog-messages\", {\r\n        \"chat__dialog-messages-attachments\": attachments.length,\r\n      })}\r\n    >\r\n      <div\r\n        ref={boxRef}\r\n        className={classNames(\"messages\", { \"messages--loading\": isLoading })}\r\n      >\r\n        {isLoading ? (\r\n          <Spin size=\"large\" tip=\"Загрузка сообщений...\" />\r\n        ) : items && !isLoading && currentDialogId ? (\r\n          items.length > 0 ? (\r\n            items.map((item: MessageType) => {\r\n              return (\r\n                <Message\r\n                  id={item._id}\r\n                  key={item._id}\r\n                  alt=\"User avatar\"\r\n                  text={item.text}\r\n                  date={new Date()}\r\n                  isMe={item.user._id === userId}\r\n                  {...item}\r\n                  isTyping={false}\r\n                  setImageUrl={setImageUrl}\r\n                  onDeleteMessage={onRemoveMessage}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n            <Empty description=\"Диалог пуст\" />\r\n          )\r\n        ) : (\r\n          <Empty description=\"Виберите диалог\" />\r\n        )}{\" \"}\r\n        {isTyping && partner && !isLoading && (\r\n          <Message isTyping={true} user={partner} />\r\n        )}\r\n      </div>\r\n\r\n      {imageUrl && (\r\n        <Modal visible={showImage} footer={null} onCancel={handleCancel}>\r\n          <img alt=\"previewImg\" style={{ width: \"100%\" }} src={imageUrl} />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { FormikErrors, FormikTouched } from \"formik\";\r\nimport { LoginFormValues } from \"../../modules/LoginForm/containers/LoginForm\";\r\nimport { RegisterFormValues } from \"../../modules/RegisterForm/containers/RegisterForm\";\r\ntype ValidateFieldTouchedType = FormikTouched<LoginFormValues> &\r\n  FormikTouched<RegisterFormValues>;\r\n\r\ntype ValidateFieldErrorsType = FormikErrors<LoginFormValues> &\r\n  FormikErrors<RegisterFormValues>;\r\n\r\nlet ValidateField = (\r\n  key: \"password\" | \"password_2\" | \"email\" | \"fullname\",\r\n  touched: ValidateFieldTouchedType,\r\n  errors: ValidateFieldErrorsType\r\n) => {\r\n  if (touched[key]) {\r\n    if (errors[key]) {\r\n      return \"error\";\r\n    } else {\r\n      return \"success\";\r\n    }\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport default ValidateField;\r\n","import { notification } from \"antd\";\r\ntype NotificationPropsType = {\r\n  type: \"success\" | \"error\";\r\n  message: string;\r\n  description: string;\r\n  duration: number;\r\n};\r\n\r\ntype openNotificationType = (props: NotificationPropsType) => void;\r\nconst openNotification: openNotificationType = ({\r\n  type,\r\n  message,\r\n  description,\r\n  duration\r\n}) => {\r\n  notification[type]({\r\n    message,\r\n    description,\r\n    duration\r\n  });\r\n};\r\nexport default openNotification;\r\n","import React, { ChangeEvent, FocusEvent } from \"react\";\r\nimport { Form, Icon, Input } from \"antd\";\r\n\r\nimport { validateField } from \"../../utils/helpers\";\r\nimport { FormikTouched, FormikErrors } from \"formik\";\r\nimport { LoginFormValues } from \"../../modules/LoginForm/containers/LoginForm\";\r\n\r\ntype Props = {\r\n  errors: FormikErrors<LoginFormValues>;\r\n  type: \"password\" | \"email\" | \"text\";\r\n  icon: string;\r\n  placeholder: string;\r\n  id: \"password\" | \"password_2\" | \"email\" | \"fullname\";\r\n  touched: FormikTouched<LoginFormValues>;\r\n  handleChange: (e: ChangeEvent<any>) => void;\r\n  handleBlur: (e: FocusEvent<any>) => void;\r\n};\r\n\r\nconst FormField: React.FC<Props> = ({\r\n  errors,\r\n  type,\r\n  icon,\r\n  placeholder,\r\n  handleChange,\r\n  handleBlur,\r\n  id,\r\n  touched\r\n}) => {\r\n  return (\r\n    <Form.Item\r\n      //@ts-ignore\r\n      help={touched[id] && errors[id]}\r\n      validateStatus={validateField(id, touched, errors)}\r\n      hasFeedback\r\n    >\r\n      {\" \"}\r\n      <Input\r\n        prefix={<Icon type={icon} style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        id={id}\r\n        onChange={handleChange}\r\n        onBlur={handleBlur}\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'https://my-messager-api.herokuapp.com/'\r\naxios.defaults.headers.common['token'] = window.localStorage.token\r\n\r\nexport default axios\r\n//https://my-messager-api.herokuapp.com/\r\n\r\n//http://localhost:3003\r\n","import { DialogType } from \"./../../types/types\";\r\nimport { axios } from \"../../core\";\r\n\r\ntype CreateDialogResType = {\r\n  dialog: DialogType;\r\n  status: string;\r\n};\r\n\r\nexport default {\r\n  getAll: () =>\r\n    axios.get<Array<DialogType>>(\"dialogs\").then((res) => {\r\n      return res.data;\r\n    }),\r\n\r\n  createDialog: async (data: { partner: string; text: string }) => {\r\n    let response = await axios.post<CreateDialogResType>(\"dialogs\", {\r\n      partner: data.partner,\r\n      text: data.text,\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n","import { MessageType } from \"./../../types/types\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { axios } from \"../../core\";\r\n\r\nexport default {\r\n  getAllByDialogId: async (id: string) => {\r\n    let response = await axios.get<Array<MessageType>>(\"messages?dialog=\" + id);\r\n    return response.data;\r\n  },\r\n  sendMessage: async (message: {\r\n    text: string;\r\n    currentDialogId: string;\r\n    attachments: Array<string>;\r\n  }) => {\r\n    axios.post(\"messages\", {\r\n      text: message.text,\r\n      attachments: message.attachments,\r\n      dialog_id: message.currentDialogId,\r\n    });\r\n  },\r\n  removeMessageById: async (id: string) => {\r\n    await axios.delete(\"messages?id=\" + id);\r\n  },\r\n};\r\n","import { UserDataType } from \"./../../types/types\";\r\nimport { axios } from \"../../core\";\r\n\r\ntype StatusType = \"success\" | \"error\";\r\n\r\ntype SignUserInResType = { token: string; status: StatusType };\r\n\r\nexport type GetUserInfoResType = {\r\n  user: UserDataType;\r\n  status: StatusType;\r\n};\r\n\r\ntype SignUserUpResType = {\r\n  result: UserDataType;\r\n  status: StatusType;\r\n};\r\n\r\ntype FindUsersResType = {\r\n  users: Array<UserDataType>;\r\n  status: StatusType;\r\n};\r\nexport default {\r\n  signUserIn: async (postData: { email: string; password: string }) => {\r\n    let response = await axios.post<SignUserInResType>(\"user/login\", postData);\r\n    return response.data;\r\n  },\r\n\r\n  getUserInfo: async () => {\r\n    let response = await axios.get<GetUserInfoResType>(\"user/me\");\r\n\r\n    return response.data;\r\n  },\r\n  signUserUp: async (postData: {\r\n    fullname: string;\r\n    email: string;\r\n    password: string;\r\n  }) => {\r\n    let response = await axios.post<SignUserUpResType>(\r\n      \"user/registration\",\r\n      postData\r\n    );\r\n    return response.data;\r\n  },\r\n  verifyHash: async (hash: string) => {\r\n    let data = await axios.get<{ message: string; status: StatusType }>(\r\n      `user/verify?hash=${hash}`\r\n    );\r\n    return data.data;\r\n  },\r\n  findUsers: async (query: string) => {\r\n    let data = await axios.get<FindUsersResType>(`user/find?query=${query}`);\r\n    return data.data;\r\n  },\r\n};\r\n","import { AxiosResponse } from \"axios\";\r\nimport { AttachmentServerType } from \"./../../types/types\";\r\nimport { axios } from \"../../core\";\r\n\r\ntype FileResType = {\r\n  status: string;\r\n  file: AttachmentServerType;\r\n};\r\nexport default {\r\n  upload: async (file: File) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    let data = await axios.post<FileResType>(\"files\", formData, {\r\n      headers: {\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n    return data.data;\r\n  },\r\n};\r\n","import { DialogType } from \"./../../types/types\";\r\nimport { dialogsApi } from \"../../utils/api\";\r\nimport { InferActionsTypes } from \"../store\";\r\nimport { BaseThunkType } from \"../../types/types\";\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\ntype DialogsThunkType = BaseThunkType<ActionsTypes>;\r\n\r\nconst actions = {\r\n  setCurrentDialog: (id: string) =>\r\n    ({\r\n      type: \"DIALOGS:SET_CURRENT_DIALOG\",\r\n      payload: id,\r\n    } as const),\r\n  setItems: (items: Array<DialogType>) =>\r\n    ({\r\n      type: \"DIALOGS:SET_ITEMS\",\r\n      payload: items,\r\n    } as const),\r\n\r\n  updateDialog: (dialog: DialogType) => {\r\n    return { type: \"DIALOGS:UPDATE_DIALOG\", payload: dialog } as const;\r\n  },\r\n  addNewDialog: (dialog: DialogType) => {\r\n    return { type: \"DIALOGS:ADD_NEW_DIALOG\", payload: dialog } as const;\r\n  },\r\n\r\n  setIsLoading: (bool: boolean) => {\r\n    return { type: \"DIALOGS:SET_IS_LOADING\", payload: bool } as const;\r\n  },\r\n};\r\n//-------------------------THUNK CREATORS\r\nexport const fetchDialogs = (): DialogsThunkType => async (dispatch) => {\r\n  dispatch(actions.setIsLoading(true));\r\n  let dialogs = await dialogsApi.getAll();\r\n  dispatch(actions.setItems(dialogs));\r\n  dispatch(actions.setIsLoading(false));\r\n};\r\nexport default actions;\r\n","import { MessageType } from \"./../../types/types\";\r\nimport { messagesApi } from \"../../utils/api\";\r\nimport { InferActionsTypes } from \"../store\";\r\nimport { BaseThunkType } from \"../../types/types\";\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>;\r\n\r\ntype MessagesThunkType = BaseThunkType<ActionsTypes>;\r\n\r\n//----------------------ACTIONS CREATORS\r\n\r\nconst actions = {\r\n  setMessages: (items: Array<MessageType>) =>\r\n    ({\r\n      type: \"MESSAGES:SET_ITEMS\",\r\n      payload: items,\r\n    } as const),\r\n\r\n  addMessage: (message: MessageType) => {\r\n    return { type: \"MESSAGES:ADD_MESSAGE\", payload: message } as const;\r\n  },\r\n\r\n  removeMessageById: (id: string) => {\r\n    return { type: \"MESSAGES:REMOVE_MESSAGE\", payload: id } as const;\r\n  },\r\n\r\n  updateUnreadMessages: () => {\r\n    return {\r\n      type: \"MESSAGES:UPDATE_UNREAD_MESSAGES\",\r\n    } as const;\r\n  },\r\n\r\n  setIsLoading: (bool: boolean) => {\r\n    return { type: \"MESSAGES:SET_IS_LOADING\", payload: bool } as const;\r\n  },\r\n};\r\n\r\n//-------------------------THUNK CREATORS\r\n\r\nexport const fetchMessages = (id: string): MessagesThunkType => async (\r\n  dispatch\r\n) => {\r\n  dispatch(actions.setIsLoading(true));\r\n\r\n  let items = await messagesApi.getAllByDialogId(id);\r\n  dispatch(actions.setMessages(items));\r\n  dispatch(actions.setIsLoading(false));\r\n};\r\nexport default actions;\r\n","import { InferActionsTypes } from './../store'\r\nimport { AppStateType } from './../reduces/index'\r\nimport { UserDataType, BaseThunkType } from './../../types/types'\r\nimport { userApi } from '../../utils/api'\r\nimport { openNotification } from '../../utils/helpers'\r\nimport axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport type UsersThunkType = BaseThunkType<ActionsTypes>\r\nconst actions = {\r\n  setAuth: (payload: boolean) =>\r\n    ({\r\n      type: 'USERS:SET_IS_AUTH',\r\n      payload\r\n    } as const),\r\n  setUserData: (data: UserDataType | null) => {\r\n    return {\r\n      type: 'USERS:SET_USER_DATA',\r\n      payload: data\r\n    } as const\r\n  }\r\n}\r\n\r\n//-----------------THUNK CREATORS\r\n\r\nexport const fetchUserData = () => async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  getState: () => AppStateType\r\n) => {\r\n  try {\r\n    const data = await userApi.getUserInfo()\r\n\r\n    if (data.status === 'success') {\r\n      dispatch(actions.setUserData(data.user))\r\n      dispatch(actions.setAuth(true))\r\n    }\r\n  } catch (err) {\r\n    if (err.response.status === 403) {\r\n      delete window.localStorage.token\r\n      axios.defaults.headers.common['token'] = ''\r\n      dispatch(actions.setAuth(false))\r\n    } else {\r\n      dispatch(actions.setAuth(false))\r\n      console.log(err)\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchLoginData = async (postData: {\r\n  email: string\r\n  password: string\r\n}) => {\r\n  try {\r\n    const data = await userApi.signUserIn(postData)\r\n    if (data.status === 'success') {\r\n      const { token } = data\r\n\r\n      window.localStorage['token'] = token\r\n      axios.defaults.headers.common['token'] = token\r\n\r\n      openNotification({\r\n        type: 'success',\r\n        message: 'Авторизация пройшла успешно!',\r\n        description: '',\r\n        duration: 1\r\n      })\r\n      return data\r\n    }\r\n  } catch (err) {\r\n    if (err.response.status === 404) {\r\n      openNotification({\r\n        type: 'error',\r\n        message: 'Ошибка при авторизации',\r\n        description: 'Такой пользователь не зарегистрирован',\r\n        duration: 1\r\n      })\r\n    } else if (err.response.status === 401) {\r\n      openNotification({\r\n        type: 'error',\r\n        message: 'Ошибка при авторизации',\r\n        description: 'Ваш аккаунт не подтвержден',\r\n        duration: 1\r\n      })\r\n    } else {\r\n      delete window.localStorage.token\r\n      axios.defaults.headers.common['token'] = ''\r\n      openNotification({\r\n        type: 'error',\r\n        message: 'Ошибка при авторизации',\r\n        description: 'Неправильный логин или пароль',\r\n        duration: 1\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport const signOut = (): UsersThunkType => async (dispatch) => {\r\n  dispatch(actions.setAuth(false))\r\n  dispatch(actions.setUserData(null))\r\n  delete window.localStorage.token\r\n}\r\n\r\nexport default actions\r\n","import { BaseThunkType } from './../../types/types'\r\nimport { fetchUserData } from './user'\r\nimport { InferActionsTypes } from '../store'\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>\r\ntype AppThunkType = BaseThunkType<ActionsTypes>\r\n\r\nconst actions = {\r\n  initializeAppAC: () => ({ type: 'APP:INITIALIZE_APP' } as const)\r\n}\r\n\r\n//------------------------THUNK CREATORS\r\nexport const initializeApp = (): AppThunkType => async (dispatch, getState) => {\r\n  let isAuth = getState().user.isAuth\r\n  if (isAuth) {\r\n    let promise = dispatch(fetchUserData())\r\n    await Promise.all([promise])\r\n    dispatch(actions.initializeAppAC())\r\n  } else {\r\n    dispatch(actions.initializeAppAC())\r\n  }\r\n}\r\nexport default actions\r\n","import { InferActionsTypes } from \"./../store\";\r\nimport { AttachmentType } from \"../../types/types\";\r\n\r\nexport type ActionsTypes = InferActionsTypes<typeof actions>;\r\nconst actions = {\r\n  setAttachments: (files: Array<AttachmentType>) => {\r\n    return {\r\n      type: \"ATTACHMENTS:SET_ATTACHMENTS\",\r\n      payload: files,\r\n    } as const;\r\n  },\r\n  removeAttachment: (file: AttachmentType) => {\r\n    return {\r\n      type: \"ATTACHMENTS:REMOVE_ATTACHMENT\",\r\n      payload: file,\r\n    } as const;\r\n  },\r\n};\r\n\r\nexport default actions;\r\n","import io from 'socket.io-client'\r\n\r\nconst socket = io('https://my-messager-api.herokuapp.com/')\r\n\r\nexport default socket\r\n//https://my-messager-api.herokuapp.com/\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Dialogs as BaseDialogs } from \"../components\";\r\nimport { dialogsActions } from \"../redux/actions\";\r\nimport { DialogType } from \"../types/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../redux/reduces\";\r\n\r\nimport socket from \"../core/socket\";\r\nimport { fetchDialogs } from \"../redux/actions/dialogs\";\r\n\r\ntype OwnPropsType = {};\r\n\r\ntype MapStatePropsType = {\r\n  items: Array<DialogType>;\r\n  userId: string;\r\n  currentDialogId: string;\r\n  isLoading: boolean;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  fetchDialogs: () => void;\r\n  addNewDialog: (dialog: DialogType) => void;\r\n  updateDialog: (dialog: DialogType) => void;\r\n};\r\n\r\ntype Props = OwnPropsType & MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst Dialogs: React.FC<Props> = ({\r\n  items,\r\n  isLoading,\r\n  userId,\r\n  fetchDialogs,\r\n  currentDialogId,\r\n  addNewDialog,\r\n  updateDialog,\r\n}) => {\r\n  let [inputValue, setInputValue] = useState(\"\");\r\n  let [filtered, setFiltered] = useState(Array.from(items));\r\n\r\n  let onSearch = (value: string) => {\r\n    setInputValue(value);\r\n    setFiltered(\r\n      items.filter((item) => {\r\n        let user = userId === item.author._id ? item.partner : item.author;\r\n        return user.fullname.toLowerCase().indexOf(value) >= 0;\r\n      })\r\n    );\r\n  };\r\n\r\n  let onAddNewDialog = (dialog: DialogType) => {\r\n    console.log(dialog);\r\n    addNewDialog(dialog);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setFiltered(items);\r\n  }, [items]);\r\n\r\n  useEffect(() => {\r\n    fetchDialogs();\r\n    socket.emit(\"joinUser\", { userId });\r\n    socket.on(\"SERVER:ADD-NEW-DIALOG\", onAddNewDialog);\r\n    socket.on(\"SERVER:UPDATE-DIALOG\", updateDialog);\r\n\r\n    return () => {\r\n      socket.removeListener(\"SERVER:ADD-NEW-DIALOG\", onAddNewDialog);\r\n      socket.removeListener(\"SERVER:UPDATE-DIALOG\", updateDialog);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <BaseDialogs\r\n      items={filtered}\r\n      onSearch={onSearch}\r\n      inputValue={inputValue}\r\n      isLoading={isLoading}\r\n      userId={userId}\r\n      currentDialogId={currentDialogId}\r\n    />\r\n  );\r\n};\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  items: state.dialogs.items,\r\n  isLoading: state.dialogs.isLoading,\r\n  userId: state.user.data!._id,\r\n  currentDialogId: state.dialogs.currentDialogId,\r\n});\r\n\r\nexport default connect<\r\n  MapStatePropsType,\r\n  MapDispatchPropsType,\r\n  OwnPropsType,\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  fetchDialogs: fetchDialogs,\r\n  addNewDialog: dialogsActions.addNewDialog,\r\n  updateDialog: dialogsActions.updateDialog,\r\n})(Dialogs);\r\n","import React, { useEffect, useCallback, useState, memo } from \"react\";\r\n\r\nimport { Messages as BaseMessages } from \"../components\";\r\nimport { messagesActions } from \"../redux/actions\";\r\nimport { MessageType, AttachmentServerType, DialogType } from \"../types/types\";\r\nimport { messagesApi } from \"../utils/api\";\r\n\r\nimport { AppStateType } from \"../redux/reduces\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { Empty } from \"antd\";\r\nimport io from \"socket.io-client\";\r\nimport userSocket from \"../core/socket\";\r\nimport { fetchMessages } from \"../redux/actions/messages\";\r\n\r\ntype OwnPropsType = {};\r\ntype MapStatePropsType = {\r\n  currentDialogId: string;\r\n  isLoading: boolean;\r\n  items: Array<MessageType>;\r\n  attachments: Array<AttachmentServerType>;\r\n  userId: string;\r\n  dialogsItems: Array<DialogType>;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  fetchMessages: (id: string) => void;\r\n  addMessage: (message: MessageType) => void;\r\n  updateUnreadMessages: () => void;\r\n  removeMessageById: (id: string) => void;\r\n};\r\n\r\ntype Props = OwnPropsType & MapStatePropsType & MapDispatchPropsType;\r\n//const sock = io(\"http://localhost:3003/\");\r\n\r\nconst Messages: React.FC<Props> = memo(\r\n  ({\r\n    items,\r\n    fetchMessages,\r\n    currentDialogId,\r\n    isLoading,\r\n    addMessage,\r\n    attachments,\r\n    userId,\r\n    dialogsItems,\r\n    updateUnreadMessages,\r\n    removeMessageById,\r\n  }) => {\r\n    let [imageUrl, setImageUrl] = useState(\"\");\r\n    let [showImage, setShowImage] = useState(false);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n\r\n    let typingTimeoutId: any = null;\r\n    const toggleIsTyping = (id: string) => {\r\n      if (userId !== id) {\r\n        setIsTyping(true);\r\n        clearInterval(typingTimeoutId);\r\n        typingTimeoutId = setTimeout(() => {\r\n          setIsTyping(false);\r\n        }, 3000);\r\n      }\r\n    };\r\n    const onNewMessage = (message: MessageType) => {\r\n      if (\r\n        message.dialog._id === currentDialogId &&\r\n        message.user._id !== userId\r\n      ) {\r\n        messagesApi.getAllByDialogId(currentDialogId);\r\n      }\r\n      addMessage(message);\r\n    };\r\n\r\n    const onUpdateUnreadMsg = ({ user }: { user: string }) => {\r\n      if (userId !== user) {\r\n        console.log(\"updateUnread\");\r\n\r\n        updateUnreadMessages();\r\n      }\r\n    };\r\n\r\n    const onDeleteMessage = (message: MessageType) => {\r\n      removeMessageById(message._id);\r\n    };\r\n\r\n    const messagesRef = useCallback(\r\n      (node: HTMLDivElement) => {\r\n        setTimeout(() => {\r\n          if (node !== null) {\r\n            node.scrollTo(0, 99999);\r\n          }\r\n        });\r\n      },\r\n      [items]\r\n    );\r\n\r\n    useEffect(() => {\r\n      if (imageUrl) {\r\n        setShowImage(true);\r\n      }\r\n    }, [imageUrl]);\r\n\r\n    useEffect(() => {\r\n      if (currentDialogId) {\r\n        fetchMessages(currentDialogId);\r\n      }\r\n      userSocket.emit(\"joinRoom\", currentDialogId);\r\n      userSocket.on(\"SERVER:NEW-MESSAGE\", onNewMessage);\r\n      userSocket.on(\"SERVER:DIALOGS:TYPING\", toggleIsTyping);\r\n      userSocket.on(\"SERVER:UPDATE-UNREAD-MSG\", onUpdateUnreadMsg);\r\n\r\n      userSocket.on(\"SERVER:DELETE_MESSAGE\", onDeleteMessage);\r\n\r\n      return () => {\r\n        userSocket.removeListener(\"SERVER:NEW-MESSAGE\", onNewMessage);\r\n        userSocket.removeListener(\"SERVER:DIALOGS:TYPING\", toggleIsTyping);\r\n        userSocket.removeListener(\r\n          \"SERVER:UPDATE-UNREAD-MSG\",\r\n          onUpdateUnreadMsg\r\n        );\r\n        userSocket.removeListener(\"SERVER:DELETE_MESSAGE\", onDeleteMessage);\r\n        userSocket.emit(\"leaveRoom\", currentDialogId);\r\n\r\n        console.log(\"messages unmounting\");\r\n      };\r\n    }, [currentDialogId]);\r\n\r\n    if (!currentDialogId) {\r\n      return <Empty description=\"Виберите диалог\" />;\r\n    }\r\n\r\n    return (\r\n      <BaseMessages\r\n        boxRef={messagesRef}\r\n        items={items}\r\n        isLoading={isLoading}\r\n        currentDialogId={currentDialogId}\r\n        attachments={attachments}\r\n        setImageUrl={setImageUrl}\r\n        showImage={showImage}\r\n        setShowImage={setShowImage}\r\n        imageUrl={imageUrl}\r\n        userId={userId}\r\n        dialogsItems={dialogsItems}\r\n        isTyping={isTyping}\r\n        onRemoveMessage={(id: string) => {\r\n          messagesApi.removeMessageById(id);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    currentDialogId: state.dialogs.currentDialogId,\r\n    isLoading: state.messages.isLoading,\r\n    items: state.messages.items,\r\n    attachments: state.attachments.items,\r\n    userId: state.user.data ? state.user.data._id : \"\",\r\n    dialogsItems: state.dialogs.items,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStatePropsType,\r\n  MapDispatchPropsType,\r\n  OwnPropsType,\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  fetchMessages: fetchMessages,\r\n  addMessage: messagesActions.addMessage,\r\n  updateUnreadMessages: messagesActions.updateUnreadMessages,\r\n  removeMessageById: messagesActions.removeMessageById,\r\n})(Messages);\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { ChatInput as ChatInputBase } from \"../components\";\r\nimport { connect } from \"react-redux\";\r\nimport { attachmentsActions } from \"../redux/actions\";\r\nimport { filesApi, messagesApi } from \"../utils/api\";\r\nimport { AttachmentServerType, AttachmentType } from \"../types/types\";\r\nimport { AppStateType } from \"../redux/reduces\";\r\nimport userSocket from \"../core/socket\";\r\n\r\ntype OwnPropsType = {};\r\n\r\ntype MapStatePropsType = {\r\n  currentDialogId: string;\r\n  attachments: Array<AttachmentType>;\r\n  userId: string;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  setAttachments: (files: Array<AttachmentType>) => void;\r\n  removeAttachment: (file: AttachmentType) => void;\r\n};\r\n\r\ntype Props = OwnPropsType & MapDispatchPropsType & MapStatePropsType;\r\n\r\nconst ChatInput: React.FC<Props> = ({\r\n  currentDialogId,\r\n  setAttachments,\r\n  removeAttachment,\r\n  attachments,\r\n  userId,\r\n}) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [emojiVisible, setEmojiVisible] = useState(false);\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  let [isDisabled, setIsDisabled] = useState(false);\r\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(\r\n    null\r\n  );\r\n\r\n  window.navigator.getUserMedia =\r\n    window.navigator.getUserMedia ||\r\n    //@ts-ignore\r\n    window.navigator.mozGetUserMedia ||\r\n    //@ts-ignore\r\n    window.navigator.msGetUserMedia ||\r\n    //@ts-ignore\r\n    window.navigator.webkitGetUserMedia;\r\n\r\n  const onRecord = () => {\r\n    if (navigator.getUserMedia) {\r\n      navigator.getUserMedia({ audio: true }, onRecording, onError);\r\n    }\r\n  };\r\n\r\n  const onRecording = (stream: MediaStream) => {\r\n    const recorder: MediaRecorder = new MediaRecorder(stream);\r\n    setMediaRecorder(recorder);\r\n\r\n    recorder.start();\r\n\r\n    recorder.onstart = () => {\r\n      setIsRecording(true);\r\n    };\r\n\r\n    recorder.onstop = () => {\r\n      setIsRecording(false);\r\n    };\r\n\r\n    recorder.ondataavailable = (e) => {\r\n      const file = new File([e.data], \"audio.webm\");\r\n      setLoading(true);\r\n      filesApi\r\n        .upload(file)\r\n        .then((data: { status: string; file: AttachmentServerType }) => {\r\n          if (data.status === \"success\" && data.file._id) {\r\n            sendAudio(data.file._id).then(() => {\r\n              setLoading(false);\r\n            });\r\n          }\r\n        });\r\n    };\r\n  };\r\n\r\n  const onError = (err: MediaStreamError) => {\r\n    throw new Error(err.toString());\r\n  };\r\n\r\n  const sendAudio = (audioId: string): Promise<any> => {\r\n    return messagesApi.sendMessage({\r\n      text: \"\",\r\n      currentDialogId,\r\n      attachments: [audioId],\r\n    });\r\n  };\r\n  const onSendMessage = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    if (isRecording && mediaRecorder) {\r\n      mediaRecorder.stop();\r\n    } else if (value || attachments.length) {\r\n      messagesApi.sendMessage({\r\n        text: value,\r\n        currentDialogId,\r\n\r\n        attachments: attachments.map((file) => (file.uid ? file.uid : \"\")),\r\n      });\r\n      setValue(\"\");\r\n      setAttachments([]);\r\n    }\r\n  };\r\n  const handleSendMessage = (\r\n    e: React.KeyboardEvent<HTMLTextAreaElement> &\r\n      React.MouseEvent<HTMLElement, MouseEvent>\r\n  ) => {\r\n    userSocket.emit(\"DIALOGS:TYPING\", { currentDialogId, userId });\r\n    if (value.length || attachments.length) {\r\n      if (e.keyCode === 13) {\r\n        onSendMessage(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleStartRecording = () => {\r\n    setIsRecording(true);\r\n  };\r\n  const onStopRecording = () => {\r\n    setIsRecording(false);\r\n  };\r\n  //----------------------EMOJI\r\n\r\n  const onOutSideClick = (e: any, el: HTMLDivElement | null) => {\r\n    if (el && !el.contains(e.target)) {\r\n      setEmojiVisible(false);\r\n    }\r\n  };\r\n  const toggleEmoji = () => {\r\n    setEmojiVisible(!emojiVisible);\r\n  };\r\n  const addEmoji = (emoji: any) => {\r\n    setValue(value + emoji.native);\r\n  };\r\n  //---------------------FILE\r\n\r\n  let selectFile = async (files: FileList): Promise<void> => {\r\n    let uploaded: Array<\r\n      AttachmentType & AttachmentServerType\r\n    > = attachments.length ? attachments : [];\r\n    for (let i = 0; i < files.length; i++) {\r\n      let file: File = files[i];\r\n      let uid: string = Math.floor(Math.random() * 1000).toString();\r\n      uploaded = [\r\n        ...uploaded,\r\n        {\r\n          uid,\r\n          name: file.name,\r\n          status: \"done\",\r\n          url:\r\n            \"https://cdn.lowgif.com/small/dc86e54ceca03be4-loading-spinner-animated-gif-83320-mediabin.gif\",\r\n        },\r\n      ];\r\n      setAttachments(uploaded);\r\n      setIsDisabled(true);\r\n      // eslint-disable-next-line no-loop-func\r\n      await filesApi\r\n        .upload(file)\r\n        .then((data: { file: AttachmentServerType; status: string }) => {\r\n          if (data.status === \"success\") {\r\n            uploaded = uploaded.map((item: AttachmentType) => {\r\n              if (item.uid === uid && data.file.url) {\r\n                return {\r\n                  uid: data.file._id,\r\n                  name: data.file.filename,\r\n                  status: \"done\",\r\n                  url: data.file.url.replace(/http/, \"https\"),\r\n                };\r\n              }\r\n              return item;\r\n            });\r\n          }\r\n        });\r\n    }\r\n    setAttachments(uploaded);\r\n    setIsDisabled(false);\r\n  };\r\n  const inputRef = useCallback(\r\n    (node: HTMLInputElement) => {\r\n      if (node) {\r\n        let margin = 40;\r\n        let elHeight = node.offsetHeight + margin + 93.5;\r\n\r\n        if (attachments.length > 0) {\r\n          elHeight = elHeight + 112;\r\n        }\r\n        const el: HTMLDivElement | null = document.querySelector(\r\n          \".chat__dialog-messages\"\r\n        );\r\n        if (el) {\r\n          el.style.height = `calc(100% - ${elHeight}px)`;\r\n          if (value.length === 0 && !attachments.length) {\r\n            el.style.height = `calc(100% - 185.5px)`;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    [value, attachments]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const el: HTMLDivElement | null = document.querySelector(\r\n      \".chat-input__smile-btn\"\r\n    );\r\n    document.addEventListener(\"click\", (e) => onOutSideClick(e, el));\r\n    return () => {\r\n      document.removeEventListener(\"click\", (e) => {\r\n        onOutSideClick(e, el);\r\n      });\r\n    };\r\n  }, [currentDialogId]);\r\n  if (!currentDialogId) {\r\n    return null;\r\n  }\r\n  return (\r\n    <ChatInputBase\r\n      inputRef={inputRef}\r\n      value={value}\r\n      setValue={setValue}\r\n      toggleEmoji={toggleEmoji}\r\n      emojiVisible={emojiVisible}\r\n      addEmoji={addEmoji}\r\n      selectFile={selectFile}\r\n      attachments={attachments}\r\n      removeAttachment={removeAttachment}\r\n      isDisabled={isDisabled}\r\n      handleSendMessage={handleSendMessage}\r\n      onSendMessage={onSendMessage}\r\n      isRecording={isRecording}\r\n      onStopRecording={onStopRecording}\r\n      onRecord={onRecord}\r\n      isLoading={isLoading}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    currentDialogId: state.dialogs.currentDialogId,\r\n    attachments: state.attachments.items,\r\n    userId: state.user.data ? state.user.data._id : \"\",\r\n  };\r\n};\r\n\r\nexport default connect<\r\n  MapStatePropsType,\r\n  MapDispatchPropsType,\r\n  OwnPropsType,\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  setAttachments: attachmentsActions.setAttachments,\r\n  removeAttachment: attachmentsActions.removeAttachment,\r\n})(ChatInput);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Status as StatusBase } from \"../components\";\r\nimport { DialogType } from \"../types/types\";\r\nimport { AppStateType } from \"../redux/reduces\";\r\n\r\ntype ownProps = {};\r\ntype MapStatePropsType = {\r\n  currentDialogId: string;\r\n  userId: string;\r\n  dialogs: Array<DialogType>;\r\n};\r\n\r\ntype MapDispatchPropsType = {};\r\n\r\ntype Props = ownProps & MapStatePropsType & MapDispatchPropsType;\r\nconst Status: React.FC<Props> = ({ currentDialogId, dialogs, userId }) => {\r\n  if (dialogs.length < 1 || !currentDialogId) {\r\n    return null;\r\n  }\r\n  const currentDialogObj: DialogType = dialogs.filter(item => {\r\n    return item._id === currentDialogId;\r\n  })[0];\r\n\r\n  if (currentDialogObj) {\r\n    let partner =\r\n      userId === currentDialogObj.author._id\r\n        ? currentDialogObj.partner\r\n        : currentDialogObj.author;\r\n\r\n    return <StatusBase online={partner.isOnline} fullname={partner.fullname} />;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\nexport default connect<\r\n  MapStatePropsType,\r\n  MapDispatchPropsType,\r\n  ownProps,\r\n  AppStateType\r\n>(({ dialogs, user }) => ({\r\n  currentDialogId: dialogs.currentDialogId,\r\n  dialogs: dialogs.items,\r\n  userId: user.data ? user.data._id : \"\"\r\n}))(Status);\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Sidebar as SidebarBase } from \"../components\";\r\nimport { userApi, dialogsApi } from \"../utils/api\";\r\nimport { AppStateType } from \"../redux/reduces\";\r\nimport { UserDataType } from \"../types/types\";\r\nimport socket from \"../core/socket\";\r\n\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { openNotification } from \"../utils/helpers\";\r\n\r\ntype OwnPropsType = {};\r\n\r\ntype MapStatePropsType = {\r\n  userId: string;\r\n};\r\n\r\ntype Props = OwnPropsType & MapStatePropsType & RouteComponentProps;\r\n\r\nlet Sidebar: React.FC<Props> = (props) => {\r\n  let [visible, setVisible] = useState(false);\r\n  let [isLoading, setIsLoading] = useState(false);\r\n  let [users, setUsers] = useState<Array<UserDataType>>([]);\r\n  let [newMessageText, setNewMessageText] = useState<string>(\"\");\r\n  let [partner, setPartner] = useState<string>(\"\");\r\n  let [selectedInputValue, setSelectInputValue] = useState(\"\");\r\n  let showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  let handleOk = async () => {\r\n    setIsLoading(true);\r\n    setNewMessageText(\"\");\r\n    setSelectInputValue(\"\");\r\n    setUsers([]);\r\n    setPartner(\"\");\r\n    setIsLoading(false);\r\n    setVisible(false);\r\n    setIsLoading(false);\r\n    setVisible(false);\r\n    try {\r\n      let data = await dialogsApi.createDialog({\r\n        partner: partner,\r\n        text: newMessageText,\r\n      });\r\n      if (data && data.status === \"success\") {\r\n        props.history.push(`/dialog/${data.dialog._id}`);\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 403) {\r\n        openNotification({\r\n          type: \"error\",\r\n          message: \"Такой диалог уже существует\",\r\n          description: \"\",\r\n          duration: 1,\r\n        });\r\n      } else {\r\n        openNotification({\r\n          type: \"error\",\r\n          message: \"Ошибка\",\r\n          description: \"\",\r\n          duration: 1,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  let handleCancel = () => {\r\n    setVisible(false);\r\n    setSelectInputValue(\"\");\r\n    setPartner(\"\");\r\n    setUsers([]);\r\n  };\r\n\r\n  //------------------SELECT HANDLERS\r\n  function onInputSelect(value: string) {\r\n    setPartner(value);\r\n  }\r\n  function onInputChange(value: string) {\r\n    setSelectInputValue(value);\r\n  }\r\n\r\n  let onSearch = async (val: string) => {\r\n    try {\r\n      let data = await userApi.findUsers(val);\r\n      if (data.status === \"success\") {\r\n        setUsers(data.users);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  //-------------------NEW MESSAGE FORM HANDLERS\r\n  let onAddNewMessage = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setNewMessageText(e.target.value);\r\n  };\r\n  return (\r\n    <SidebarBase\r\n      modalText=\"\"\r\n      userId={props.userId}\r\n      isLoading={isLoading}\r\n      visible={visible}\r\n      showModal={showModal}\r\n      handleCancel={handleCancel}\r\n      handleOk={handleOk}\r\n      onInputSelect={onInputSelect}\r\n      users={users}\r\n      onSearch={onSearch}\r\n      onAddNewMessage={onAddNewMessage}\r\n      partner={partner}\r\n      newMessageText={newMessageText}\r\n      selectedInputValue={selectedInputValue}\r\n      onInputChange={onInputChange}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    userId: state.user.data ? state.user.data._id : \"\",\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect<MapStatePropsType, {}, OwnPropsType, AppStateType>(mapStateToProps)(\r\n    Sidebar\r\n  )\r\n);\r\n","import React from \"react\";\r\n\r\nimport { Dialogs } from \"../../containers\";\r\nimport { UserDataType } from \"../../types/types\";\r\n\r\nimport { Button, Icon, Modal, Select, Form, Input } from \"antd\";\r\n\r\nimport \"./Sidebar.scss\";\r\n\r\nconst { Option } = Select;\r\n\r\ntype Props = {\r\n  isLoading: boolean;\r\n  userId: string;\r\n  visible: boolean;\r\n  modalText: string;\r\n  partner: string;\r\n  newMessageText: string;\r\n  users: Array<UserDataType>;\r\n  selectedInputValue: string;\r\n\r\n  showModal: () => void;\r\n  handleCancel: () => void;\r\n  handleOk: () => void;\r\n  onInputSelect: (value: string) => void;\r\n  onInputChange: (value: string) => void;\r\n  onSearch: (value: string) => void;\r\n  onAddNewMessage: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n};\r\nlet Sidebar: React.FC<Props> = (props) => {\r\n  let {\r\n    isLoading,\r\n    visible,\r\n    modalText,\r\n    showModal,\r\n    handleCancel,\r\n    handleOk,\r\n    onInputSelect,\r\n    onInputChange,\r\n    users,\r\n    onSearch,\r\n    onAddNewMessage,\r\n    partner,\r\n    newMessageText,\r\n    selectedInputValue,\r\n  } = props;\r\n\r\n  let options = users.map((user) => (\r\n    <Option key={user._id}>{user.fullname}</Option>\r\n  ));\r\n  return (\r\n    <div className=\"chat__sidebar\">\r\n      <div className=\"chat__sidebar-header\">\r\n        <div>\r\n          <Icon type=\"team\" />\r\n          <span>Список диалогов</span>\r\n        </div>\r\n        <Button onClick={showModal} type=\"link\" shape=\"circle\" icon=\"form\" />\r\n      </div>\r\n\r\n      <div className=\"chat__sidebar-dialogs\">\r\n        <Dialogs />\r\n      </div>\r\n      <div>\r\n        <Modal\r\n          title=\"Создать диалог\"\r\n          visible={visible}\r\n          confirmLoading={isLoading}\r\n          onCancel={handleCancel}\r\n          footer={[\r\n            <Button key=\"back\" onClick={handleCancel}>\r\n              Закрыть\r\n            </Button>,\r\n            <Button\r\n              disabled={!newMessageText}\r\n              key=\"submit\"\r\n              type=\"primary\"\r\n              loading={isLoading}\r\n              onClick={handleOk}\r\n            >\r\n              Создать\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <p>{modalText}</p>\r\n\r\n          <Form className=\"add-dialog-form\">\r\n            <Form.Item label=\"Введите имя пользователя или E-Mail\">\r\n              <Select\r\n                showSearch\r\n                style={{ width: \"100%\" }}\r\n                optionFilterProp=\"children\"\r\n                onChange={onInputChange}\r\n                onSelect={onInputSelect}\r\n                onSearch={onSearch}\r\n                filterOption={false}\r\n                placeholder=\"Имя пользователя или E-mail\"\r\n                value={selectedInputValue}\r\n              >\r\n                {options}\r\n              </Select>\r\n            </Form.Item>\r\n            {partner && (\r\n              <Form.Item label=\"Введите текст сообщения\">\r\n                <Input.TextArea\r\n                  onChange={onAddNewMessage}\r\n                  autoSize={{ minRows: 2, maxRows: 6 }}\r\n                  value={newMessageText}\r\n                  placeholder=\"Текст сообщения...\"\r\n                />\r\n              </Form.Item>\r\n            )}\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Upload, Modal } from \"antd\";\r\nimport { AttachmentType } from \"../../types/types\";\r\n\r\nfunction getBase64(file: Blob) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n\r\ntype Props = {\r\n  attachments: Array<AttachmentType>;\r\n  removeAttachment: (file: AttachmentType) => void;\r\n};\r\n\r\nlet UploadFiles: React.FC<Props> = ({ attachments, removeAttachment }) => {\r\n  let [previewVisible, setPreviewVisible] = useState<boolean>(false);\r\n  let [previewImage, setPreviewImage] = useState<string>(\"\");\r\n  let [fileList, setFileList] = useState(attachments);\r\n  let handleCancel = () => {\r\n    setPreviewVisible(false);\r\n  };\r\n\r\n  let handlePreview = async (file: any) => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n    setPreviewImage(file.url || file.preview);\r\n    setPreviewVisible(true);\r\n  };\r\n\r\n  let handleChange = (data: {\r\n    file: AttachmentType;\r\n    fileList: Array<AttachmentType>;\r\n  }) => {\r\n    setFileList(data.fileList);\r\n  };\r\n  useEffect(() => {\r\n    setFileList(attachments);\r\n  }, [attachments]);\r\n  return (\r\n    <div className=\"clearfix\">\r\n      <Upload\r\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n        listType=\"picture-card\"\r\n        //@ts-ignore\r\n        fileList={fileList}\r\n        onPreview={handlePreview}\r\n        onChange={(data: any) => {\r\n          handleChange(data);\r\n        }}\r\n        //@ts-ignore\r\n        onRemove={(file: AttachmentType) => {\r\n          removeAttachment(file);\r\n        }}\r\n      ></Upload>{\" \"}\r\n      <Modal visible={previewVisible} footer={null} onCancel={handleCancel}>\r\n        <img alt=\"example\" style={{ width: \"100%\" }} src={previewImage} />\r\n      </Modal>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadFiles;\r\n","import React from \"react\";\r\nimport { Result } from \"antd\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nlet ErrorIndicator: React.FC = () => {\r\n  return <Result status=\"500\" subTitle=\"Что-то пошло не так.\" />;\r\n};\r\n\r\nexport default withRouter(ErrorIndicator);\r\n","import React, { Component, ReactElement } from \"react\";\r\nimport ErrorIndicator from \"../ErrorIndicator\";\r\n\r\ntype Props = {\r\n  children: ReactElement;\r\n};\r\ntype State = {\r\n  errorIndicator: boolean;\r\n};\r\nclass ErrorBoundry extends Component<Props, State> {\r\n  state = {\r\n    errorIndicator: false\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ errorIndicator: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.errorIndicator) {\r\n      return <ErrorIndicator />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nimport { Form } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Block, FormField } from \"../../../components\";\r\nimport { LoginFormValues } from \"../containers/LoginForm\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { FormikProps } from \"formik\";\r\n\r\ninterface OtherProps {\r\n  isAuth: boolean;\r\n}\r\nconst LoginForm = (props: OtherProps & FormikProps<LoginFormValues>) => {\r\n  const {\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    isSubmitting,\r\n    isAuth,\r\n  } = props;\r\n  if (isAuth) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <div className=\"auth__top\">\r\n        <h2>Войти в аккаунт</h2>\r\n        <p>Пожалуйста, войдите в свой аккаунт</p>\r\n      </div>\r\n      <Block>\r\n        <Form onSubmit={handleSubmit} className=\"login-form\">\r\n          <FormField\r\n            errors={errors}\r\n            touched={touched}\r\n            placeholder=\"E-mail\"\r\n            handleChange={handleChange}\r\n            handleBlur={handleBlur}\r\n            type=\"email\"\r\n            icon=\"mail\"\r\n            id=\"email\"\r\n          />\r\n          <FormField\r\n            errors={errors}\r\n            touched={touched}\r\n            placeholder=\"Пароль\"\r\n            handleChange={handleChange}\r\n            handleBlur={handleBlur}\r\n            type=\"password\"\r\n            icon=\"lock\"\r\n            id=\"password\"\r\n          />\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              onClick={handleSubmit}\r\n              loading={isSubmitting}\r\n              disabled={isSubmitting}\r\n            >\r\n              Войти в аккаунт\r\n            </Button>\r\n          </Form.Item>\r\n          <Link className=\"auth__register-link\" to=\"/signup\">\r\n            Зарегистрироваться\r\n          </Link>\r\n        </Form>\r\n      </Block>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { RegisterFormValues } from \"./../modules/RegisterForm/containers/RegisterForm\";\r\nimport { LoginFormValues } from \"../modules/LoginForm/containers/LoginForm\";\r\nimport { FormikErrors } from \"formik\";\r\n\r\ntype ValidateFuncParamsTypes = {\r\n  isAuth: boolean;\r\n  errors: FormikErrors<LoginFormValues & RegisterFormValues>;\r\n  values: LoginFormValues & RegisterFormValues;\r\n};\r\n\r\ntype ValidateFuncType = (params: ValidateFuncParamsTypes) => void;\r\n\r\nlet validateFunc: ValidateFuncType = ({ isAuth, errors, values }) => {\r\n  const rules = {\r\n    email: (value: string) => {\r\n      if (!value) {\r\n        errors.email = \"Введите почту\";\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        errors.email = \"Неправильный адресс почты\";\r\n      }\r\n    },\r\n    password: (value: string) => {\r\n      if (!value) {\r\n        errors.password = \"Введите пароль\";\r\n      } else if (value.length < 6) {\r\n        !isAuth && (errors.password = \"Слишком лёгкий пароль\");\r\n      }\r\n    },\r\n    password_2: (value: string) => {\r\n      if (value !== values.password) {\r\n        errors.password_2 = \"Пароли не совпадают\";\r\n      }\r\n    },\r\n    fullname: (value: string) => {\r\n      if (!value) {\r\n        errors.fullname = \"Введите ваше имя\";\r\n      } else if (value.length < 4) {\r\n        errors.fullname = \"Имя должно содержать не меньше 4 символов\";\r\n      }\r\n    }\r\n  };\r\n\r\n  Object.keys(values).forEach(\r\n    //@ts-ignore\r\n    (key: string) => rules[key] && rules[key](values[key])\r\n  );\r\n};\r\n\r\nexport default validateFunc;\r\n","import { fetchLoginData } from \"./../../../redux/actions/user\";\r\nimport { fetchUserData } from \"../../../redux/actions/user\";\r\nimport { AppStateType } from \"./../../../redux/reduces/index\";\r\nimport LoginForm from \"../components/LoginForm\";\r\nimport { withFormik, FormikErrors } from \"formik\";\r\nimport validateFunc from \"../../../utils/validations\";\r\nimport store from \"../../../redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport { appActions } from \"../../../redux/actions\";\r\n\r\nexport interface LoginFormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface FormProps {\r\n  isAuth: boolean;\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\nconst LoginFormContainer = withFormik<FormProps, LoginFormValues>({\r\n  mapPropsToValues: () => ({ email: \"\", password: \"\" }),\r\n  validate: (values) => {\r\n    let errors: FormikErrors<LoginFormValues> = {};\r\n    validateFunc({ isAuth: true, errors, values });\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: async (values, props) => {\r\n    try {\r\n      let data = await fetchLoginData(values);\r\n      props.setSubmitting(false);\r\n      if (data && data.status === \"success\") {\r\n        ///@ts-ignore\r\n        store.dispatch(fetchUserData());\r\n\r\n        store.dispatch(appActions.initializeAppAC());\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  },\r\n  displayName: \"LoginForm\",\r\n})(LoginForm);\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.user.isAuth,\r\n  };\r\n};\r\n\r\nexport default connect<MapStatePropsType, {}, {}, AppStateType>(\r\n  mapStateToProps\r\n)(LoginFormContainer);\r\n","import LoginForm from './containers/LoginForm';\r\nexport default LoginForm;","import React from \"react\";\r\n\r\nimport { Button, Block, FormField } from \"../../../components\";\r\nimport { RegisterFormValues } from \"../containers/RegisterForm\";\r\nimport { FormikProps } from \"formik\";\r\n\r\nimport { Form, Icon } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst success = false;\r\nconst RegisterForm = (props: {} & FormikProps<RegisterFormValues>) => {\r\n  const {\r\n    touched,\r\n    errors,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    isSubmitting\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <div className=\"auth__top\">\r\n        <h2>Регистрация</h2>\r\n        <p>Для входа в чат вам нужно зарегистрироваться</p>\r\n      </div>\r\n      <Block>\r\n        {!success ? (\r\n          <Form onSubmit={handleSubmit} className=\"login-form\">\r\n            <FormField\r\n              errors={errors}\r\n              touched={touched}\r\n              placeholder=\"E-mail\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              type=\"email\"\r\n              icon=\"mail\"\r\n              id=\"email\"\r\n            />\r\n            <FormField\r\n              errors={errors}\r\n              touched={touched}\r\n              placeholder=\"Ваше имя\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              type=\"text\"\r\n              icon=\"user\"\r\n              id=\"fullname\"\r\n            />\r\n            <FormField\r\n              errors={errors}\r\n              touched={touched}\r\n              placeholder=\"Пароль\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              type=\"password\"\r\n              icon=\"lock\"\r\n              id=\"password\"\r\n            />\r\n            <FormField\r\n              errors={errors}\r\n              touched={touched}\r\n              placeholder=\"Повторите пароль\"\r\n              handleChange={handleChange}\r\n              handleBlur={handleBlur}\r\n              type=\"password\"\r\n              icon=\"lock\"\r\n              id=\"password_2\"\r\n            />\r\n\r\n            <Form.Item>\r\n              <Button\r\n                disabled={isSubmitting}\r\n                type=\"primary\"\r\n                size=\"large\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Зарегистрироваться\r\n              </Button>\r\n            </Form.Item>\r\n            <Link className=\"auth__register-link\" to=\"/signin\">\r\n              Войти в аккаунт\r\n            </Link>\r\n          </Form>\r\n        ) : (\r\n          <div className=\"auth__success-block\">\r\n            <div>\r\n              <Icon type=\"info-circle\" theme=\"twoTone\" />\r\n            </div>\r\n            <h2>Подтвердите свой аккаунт</h2>\r\n            <p>\r\n              На вашу почту отправлено письмо с ссылкой на подтверждения\r\n              аккаунта.\r\n            </p>\r\n          </div>\r\n        )}\r\n      </Block>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import RegisterForm from './containers/RegisterForm';\r\nexport default RegisterForm;","import { withFormik } from \"formik\";\r\nimport RegisterForm from \"../components/RegisterForm\";\r\nimport validateFunc from \"../../../utils/validations\";\r\nimport { userApi } from \"../../../utils/api\";\r\nimport { openNotification } from \"../../../utils/helpers\";\r\n\r\nexport interface RegisterFormValues {\r\n  email: string;\r\n  password: string;\r\n  fullname?: string;\r\n  password_2?: string;\r\n}\r\n\r\ninterface FormProps {}\r\n\r\nexport default withFormik<FormProps, RegisterFormValues>({\r\n  // Custom sync validation\r\n  mapPropsToValues: () => ({\r\n    email: \"\",\r\n    password: \"\",\r\n    password_2: \"\",\r\n    fullname: \"\",\r\n  }),\r\n  validate: (values) => {\r\n    let errors = {};\r\n    validateFunc({ isAuth: false, errors, values });\r\n    return errors;\r\n  },\r\n\r\n  handleSubmit: async (values, { setSubmitting, props }) => {\r\n    const { email, password, fullname } = values;\r\n    try {\r\n      if (fullname) {\r\n        let data = await userApi.signUserUp({ email, password, fullname });\r\n        if (data.status !== \"error\") {\r\n          //@ts-ignore\r\n          props.history.push(\"/user/verify\");\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err.response.status === 400) {\r\n        openNotification({\r\n          type: \"error\",\r\n          message: \"Ошибка при регистрации\",\r\n          description: \"Такой пользователь уже зарегистрирован\",\r\n          duration: 1,\r\n        });\r\n      } else {\r\n        openNotification({\r\n          type: \"error\",\r\n          message: \"Server Error\",\r\n          description: \"Something went wrong\",\r\n          duration: 1,\r\n        });\r\n      }\r\n      setSubmitting(false);\r\n    }\r\n  },\r\n  displayName: \"RegisterForm\",\r\n})(RegisterForm);\r\n","import React, { useEffect, useState, ReactNode } from \"react\";\r\nimport { Result, Button, Spin } from \"antd\";\r\nimport { Block } from \"../../../components\";\r\nimport userApi from \"../../../utils/api/user\";\r\nimport { Link } from \"react-router-dom\";\r\ntype RenderTextInfoParamsType = {\r\n  verified: boolean | null;\r\n  hash: string;\r\n  error: boolean;\r\n};\r\ntype RenderTextInfoType = (\r\n  params: RenderTextInfoParamsType\r\n) =>\r\n  | {\r\n      status: \"success\" | \"error\" | \"info\" | \"warning\";\r\n      title: string;\r\n      message: string;\r\n      extra?: JSX.Element[];\r\n    }\r\n  | undefined;\r\n\r\nlet renderTextInfo: RenderTextInfoType = ({ verified, hash, error }) => {\r\n  if (hash) {\r\n    if (verified) {\r\n      return {\r\n        status: \"success\",\r\n        title: \"Готово!\",\r\n        message: \"Ваш аккаунт успешно подтвержден\",\r\n        extra: [\r\n          <Link to=\"/signin\" key=\"123\">\r\n            <Button type=\"primary\">Ввойти в аккаунт</Button>\r\n          </Link>\r\n        ]\r\n      };\r\n    } else if (error) {\r\n      return {\r\n        status: \"error\",\r\n        title: \"Ошибка\",\r\n        message: \"Неудалось подтвердить аккаунт \"\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      status: \"success\",\r\n      title: \"Регистрация прошла успешно!\",\r\n      message: \"Ссылка для подтверждения аккаунта отправлена на почту\"\r\n    };\r\n  }\r\n};\r\ntype Props = {\r\n  location: Location;\r\n};\r\nlet CheckEmailInfo: React.FC<Props> = props => {\r\n  console.log(props);\r\n  const hash = props.location.search.split(\"?hash=\")[1];\r\n\r\n  let [verified, setVerified] = useState<boolean | null>(null);\r\n  let [loading, setIsLoading] = useState(false);\r\n  let [error, setError] = useState(false);\r\n\r\n  let info = renderTextInfo({ verified, hash, error });\r\n  useEffect(() => {\r\n    if (hash) {\r\n      userApi\r\n        .verifyHash(hash)\r\n        .then(async data => {\r\n          setIsLoading(true);\r\n          if (data.status === \"success\") {\r\n            setVerified(true);\r\n            setIsLoading(false);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          setError(true);\r\n          setIsLoading(false);\r\n        });\r\n    }\r\n  }, [hash]);\r\n  if (loading || !info) {\r\n    return <Spin />;\r\n  }\r\n  return (\r\n    <Block>\r\n      <Result\r\n        status={info.status}\r\n        extra={info.extra}\r\n        title={info.title}\r\n        subTitle={info.message}\r\n      />\r\n    </Block>\r\n  );\r\n};\r\n\r\nexport default CheckEmailInfo;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { LoginForm, RegisterForm } from \"../../modules/index\";\r\nimport CheckEmailInfo from \"./components/CheckEmailInfo\";\r\n\r\nimport \"./Auth.scss\";\r\n\r\nconst Auth: React.FC<{}> = () => {\r\n  return (\r\n    <section className=\"auth\">\r\n      <div className=\"auth__content\">\r\n        <Switch>\r\n          <Route exact path=\"/signup\" component={RegisterForm} />\r\n          <Route exact path=\"/user/verify\" component={CheckEmailInfo} />\r\n          <Route path={[\"/\", \"/signin\"]} component={LoginForm} />\r\n        </Switch>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import React, { useEffect } from \"react\";\r\nimport { Icon } from \"antd\";\r\nimport { Messages, ChatInput, Status, Sidebar } from \"../../containers\";\r\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { dialogsActions, messagesActions } from \"../../redux/actions\";\r\nimport \"./Home.scss\";\r\nimport { signOut } from \"../../redux/actions/user\";\r\nimport { DialogType, MessageType } from \"../../types/types\";\r\nimport { AppStateType } from \"../../redux/reduces\";\r\n\r\ntype MapStatePropsType = {\r\n  fullname: string;\r\n  userId: string;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  setCurrentDialog: (id: string) => void;\r\n  setDialogsItems: (items: Array<DialogType>) => void;\r\n  signOut: () => void;\r\n  setMessagesItems: (items: Array<MessageType>) => void;\r\n};\r\n\r\ntype OwnPropsType = RouteComponentProps<any>;\r\n\r\ntype Props = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\nconst Home: React.FunctionComponent<Props> = (props) => {\r\n  let {\r\n    setCurrentDialog,\r\n    setDialogsItems,\r\n    setMessagesItems,\r\n\r\n    fullname,\r\n    signOut,\r\n  } = props;\r\n  let onSignOut = () => {\r\n    let check = window.confirm(\r\n      `${fullname}, вы уверенны что хотите выйти из аккаунта?`\r\n    );\r\n    if (check) {\r\n      signOut();\r\n      setDialogsItems([]);\r\n      setMessagesItems([]);\r\n      setCurrentDialog(\"\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    return () => {\r\n      props.history.push(\"/\");\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    let path = props.location.pathname;\r\n    let dialogId = path.split(\"/\").pop();\r\n    if (dialogId && dialogId.length === 24) {\r\n      setCurrentDialog(dialogId);\r\n    }\r\n  }, [props.location.pathname, setCurrentDialog]);\r\n\r\n  return (\r\n    <section className=\"home\">\r\n      <div className=\"chat\">\r\n        <Sidebar />\r\n        <div className=\"chat__dialog\">\r\n          <div className=\"chat__dialog-header\">\r\n            <div />\r\n            <Status />\r\n            <div>\r\n              {\" \"}\r\n              <Icon\r\n                style={{\r\n                  fontSize: \"20px\",\r\n                  marginRight: \"10px\",\r\n                  color: \"#389990\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                type=\"logout\"\r\n                onClick={onSignOut}\r\n              />\r\n            </div>\r\n          </div>\r\n          <Messages />\r\n          <div className=\"chat__dialog-input\">\r\n            <ChatInput />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default withRouter(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n    ({ user }) => ({\r\n      fullname: user.data ? user.data.fullname : \"\",\r\n      userId: user.data ? user.data._id : \"\",\r\n    }),\r\n    {\r\n      setCurrentDialog: dialogsActions.setCurrentDialog,\r\n      setDialogsItems: dialogsActions.setItems,\r\n      signOut,\r\n      setMessagesItems: messagesActions.setMessages,\r\n    }\r\n  )(Home)\r\n);\r\n","import React, { useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Spin, Result } from \"antd\";\r\n\r\nimport { Auth, Home } from \"./pages\";\r\nimport { AppStateType } from \"./redux/reduces\";\r\nimport { initializeApp } from \"./redux/actions/app\";\r\n\r\ntype MapStatePropsType = {\r\n  isInitialized: boolean;\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDisptchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\ntype OwnPropsType = {};\r\n\r\ntype Props = MapStatePropsType & MapDisptchPropsType & OwnPropsType;\r\nlet App: React.FC<Props> = (props) => {\r\n  let { isAuth, initializeApp, isInitialized } = props;\r\n  useEffect(() => {\r\n    initializeApp();\r\n  }, [isAuth, initializeApp]);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <Spin\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"50%\",\r\n          top: \"50%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }}\r\n        size=\"large\"\r\n        tip=\"Загрузка...\"\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {\" \"}\r\n      <Switch>\r\n        {isAuth && (\r\n          <Route exact path=\"/:dialog?/:id?\" render={() => <Home />} />\r\n        )}\r\n        <Route\r\n          exact\r\n          path={[\"/\", \"/signin\", \"/signup\", \"/user/verify\"]}\r\n          component={Auth}\r\n        />\r\n        <Route\r\n          render={() => {\r\n            return (\r\n              <Result\r\n                status=\"404\"\r\n                title=\"404\"\r\n                subTitle=\"Sorry, the page you visited does not exist.\"\r\n              />\r\n            );\r\n          }}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.user.isAuth,\r\n    isInitialized: state.app.isInitialized,\r\n  };\r\n};\r\nexport default connect<\r\n  MapStatePropsType,\r\n  MapDisptchPropsType,\r\n  OwnPropsType,\r\n  AppStateType\r\n>(mapStateToProps, { initializeApp })(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport { ErrorBoundry } from \"./components\";\r\n\r\nimport App from \"./App\";\r\n\r\nimport \"./styles/index.scss\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <ErrorBoundry>\r\n        <App />\r\n      </ErrorBoundry>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}